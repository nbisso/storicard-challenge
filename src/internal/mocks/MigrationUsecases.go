// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/nbisso/storicard-challenge/domain"

	mock "github.com/stretchr/testify/mock"
)

// MigrationUsecases is an autogenerated mock type for the MigrationUsecases type
type MigrationUsecases struct {
	mock.Mock
}

// GetFinishedMigrations provides a mock function with given fields: ctx
func (_m *MigrationUsecases) GetFinishedMigrations(ctx context.Context) ([]domain.Migration, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFinishedMigrations")
	}

	var r0 []domain.Migration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Migration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Migration); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Migration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMigrationByFilename provides a mock function with given fields: ctx, filename
func (_m *MigrationUsecases) GetMigrationByFilename(ctx context.Context, filename string) (*domain.Migration, error) {
	ret := _m.Called(ctx, filename)

	if len(ret) == 0 {
		panic("no return value specified for GetMigrationByFilename")
	}

	var r0 *domain.Migration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Migration, error)); ok {
		return rf(ctx, filename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Migration); ok {
		r0 = rf(ctx, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Migration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMigrationFile provides a mock function with given fields: ctx, filename
func (_m *MigrationUsecases) GetMigrationFile(ctx context.Context, filename string) (string, error) {
	ret := _m.Called(ctx, filename)

	if len(ret) == 0 {
		panic("no return value specified for GetMigrationFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, filename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBalance provides a mock function with given fields: ctx, tfilter
func (_m *MigrationUsecases) GetUserBalance(ctx context.Context, tfilter domain.TransactionFilter) (domain.TransactionResult, error) {
	ret := _m.Called(ctx, tfilter)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBalance")
	}

	var r0 domain.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TransactionFilter) (domain.TransactionResult, error)); ok {
		return rf(ctx, tfilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.TransactionFilter) domain.TransactionResult); ok {
		r0 = rf(ctx, tfilter)
	} else {
		r0 = ret.Get(0).(domain.TransactionResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.TransactionFilter) error); ok {
		r1 = rf(ctx, tfilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMigration provides a mock function with given fields: ctx, req
func (_m *MigrationUsecases) NewMigration(ctx context.Context, req domain.MigrationRequest) (domain.Migration, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewMigration")
	}

	var r0 domain.Migration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.MigrationRequest) (domain.Migration, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.MigrationRequest) domain.Migration); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.Migration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.MigrationRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTransaction provides a mock function with given fields: ctx, transaction, file
func (_m *MigrationUsecases) SaveTransaction(ctx context.Context, transaction domain.Transaction, file string) error {
	ret := _m.Called(ctx, transaction, file)

	if len(ret) == 0 {
		panic("no return value specified for SaveTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Transaction, string) error); ok {
		r0 = rf(ctx, transaction, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMigration provides a mock function with given fields: ctx, migration
func (_m *MigrationUsecases) UpdateMigration(ctx context.Context, migration domain.Migration) error {
	ret := _m.Called(ctx, migration)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMigration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Migration) error); ok {
		r0 = rf(ctx, migration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMigrationStatus provides a mock function with given fields: ctx, id, status
func (_m *MigrationUsecases) UpdateMigrationStatus(ctx context.Context, id int, status domain.MigrationStatus) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMigrationStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.MigrationStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMigrationUsecases creates a new instance of MigrationUsecases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMigrationUsecases(t interface {
	mock.TestingT
	Cleanup(func())
}) *MigrationUsecases {
	mock := &MigrationUsecases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
