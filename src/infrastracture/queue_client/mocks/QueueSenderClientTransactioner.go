// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	queueclient "github.com/nbisso/storicard-challenge/infrastracture/queue_client"
	mock "github.com/stretchr/testify/mock"
)

// QueueSenderClientTransactioner is an autogenerated mock type for the QueueSenderClientTransactioner type
type QueueSenderClientTransactioner struct {
	mock.Mock
}

// BeginTransaction provides a mock function with given fields:
func (_m *QueueSenderClientTransactioner) BeginTransaction() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *QueueSenderClientTransactioner) Close() {
	_m.Called()
}

// CommitTransaction provides a mock function with given fields: ctx
func (_m *QueueSenderClientTransactioner) CommitTransaction(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *QueueSenderClientTransactioner) Flush() {
	_m.Called()
}

// InitTransaction provides a mock function with given fields: ctx
func (_m *QueueSenderClientTransactioner) InitTransaction(ctx context.Context) (queueclient.QueueSenderClientTransactioner, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InitTransaction")
	}

	var r0 queueclient.QueueSenderClientTransactioner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (queueclient.QueueSenderClientTransactioner, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) queueclient.QueueSenderClientTransactioner); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(queueclient.QueueSenderClientTransactioner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackTransaction provides a mock function with given fields: ctx
func (_m *QueueSenderClientTransactioner) RollbackTransaction(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: message
func (_m *QueueSenderClientTransactioner) SendMessage(message string) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessageWithHeaders provides a mock function with given fields: message, headers
func (_m *QueueSenderClientTransactioner) SendMessageWithHeaders(message string, headers map[string]string) error {
	ret := _m.Called(message, headers)

	if len(ret) == 0 {
		panic("no return value specified for SendMessageWithHeaders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(message, headers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueueSenderClientTransactioner creates a new instance of QueueSenderClientTransactioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueSenderClientTransactioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueSenderClientTransactioner {
	mock := &QueueSenderClientTransactioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
